import streamlit as st
import pandas as pd
import joblib

# Load the machine learning pipeline
@st.cache_resource
def load_pipeline():
    with open('pipeline.pkl', 'rb') as f:
        return joblib.load(f)

pipeline = load_pipeline()

# Function to process uploaded CSV file
def process_file(uploaded_file):
    if uploaded_file is not None:
        try:
            data = pd.read_csv(uploaded_file)
            data.columns = data.columns.str.replace('\n', '')
            data.rename(columns={'Departments ': 'departments'}, inplace=True)
            data = data.drop_duplicates()

            # Make predictions
            result = pipeline.predict(data)
            y_pred = ["An employee may leave the organization." if pred == 1 
                       else "An employee may stay with the organization." 
                       for pred in result]
            data['Predicted_target'] = y_pred
            
            # Save the processed file
            save_file(data)
        except Exception as e:
            st.error(f"Failed to process file: {e}")

# Function to save the processed data
def save_file(data):
    csv = data.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="Download Processed File",
        data=csv,
        file_name='processed_data.csv',
        mime='text/csv',
    )

# Streamlit UI for file upload
st.title("WorkForce")
st.subheader("Upload CSV File")

uploaded_file = st.file_uploader("Choose a CSV file", type="csv")
if st.button("Process File"):
    process_file(uploaded_file)

# Streamlit UI for manual input
st.subheader("Predict Employee Churn")

# Input fields for employee data
satisfaction_level = st.number_input("Employee Satisfaction Level", min_value=0.0, max_value=1.0, step=0.01)
last_evaluation = st.number_input("Last Evaluation Score", min_value=0.0, max_value=1.0, step=0.01)
number_project = st.number_input("Number of Projects Assigned", min_value=1, step=1)
average_monthly_hours = st.number_input("Average Monthly Hours Worked", min_value=1, step=1)
time_spent_company = st.number_input("Time Spent at the Company (Years)", min_value=1, step=1)
work_accident = st.selectbox("Work Accident (1=Yes, 0=No)", [0, 1])
promotion_last_5years = st.selectbox("Promotion in Last 5 Years (1=Yes, 0=No)", [0, 1])
department = st.selectbox("Department Name", ['sales', 'technical', 'support', 'IT', 'product_mng', 'marketing', 'RandD', 'accounting', 'hr', 'management'])
salary = st.selectbox("Salary Category", ['low', 'medium', 'high'])

if st.button("Predict"):
    sample = pd.DataFrame({
        'satisfaction_level': [satisfaction_level],
        'last_evaluation': [last_evaluation],
        'number_project': [number_project],
        'average_montly_hours': [average_monthly_hours],
        'time_spend_company': [time_spent_company],
        'Work_accident': [work_accident],
        'promotion_last_5years': [promotion_last_5years],
        'departments': [department],
        'salary': [salary]
    })

    result = pipeline.predict(sample)
    if result[0] == 1:
        st.success("An employee may leave the organization.")
    else:
        st.success("An employee may stay with the organization.")